<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="club.boyuan.official.mapper.ResumeMapper">
    
    <resultMap id="ResumeMap" type="club.boyuan.official.entity.Resume">
        <id column="resume_id" property="resumeId"/>
        <result column="user_id" property="userId"/>
        <result column="cycle_id" property="cycleId"/>
        <result column="status" property="status"/>
        <result column="submitted_at" property="submittedAt"/>
        <result column="created_at" property="createdAt"/>
        <result column="updated_at" property="updatedAt"/>
    </resultMap>
    
    <!-- 根据用户ID和招聘年份ID查询简历 -->
    <select id="findByUserIdAndCycleId" resultMap="ResumeMap">
        SELECT * FROM resume WHERE user_id = #{userId} AND cycle_id = #{cycleId}
    </select>
    
    <!-- 根据简历ID查询简历 -->
    <select id="findById" resultMap="ResumeMap">
        SELECT * FROM resume WHERE resume_id = #{resumeId}
    </select>
    
    <!-- 根据用户ID查询简历列表 -->
    <select id="findByUserId" resultMap="ResumeMap">
        SELECT * FROM resume WHERE user_id = #{userId}
    </select>
    
    <!-- 根据招募周期ID查询简历列表 -->
    <select id="findByCycleId" resultMap="ResumeMap">
        SELECT * FROM resume WHERE cycle_id = #{cycleId}
    </select>
    
    <!-- 多条件查询简历列表 -->
    <select id="queryResumes" resultMap="ResumeMap">
        SELECT DISTINCT r.* FROM resume r
        LEFT JOIN user u ON r.user_id = u.user_id
        LEFT JOIN resume_field_value rfv_ed ON r.resume_id = rfv_ed.resume_id
        LEFT JOIN resume_field_definition rfd_ed ON rfv_ed.field_id = rfd_ed.field_id AND rfd_ed.field_key = 'expected_departments'
        <where>
            <if test="name != null and name != ''">
                AND u.name LIKE CONCAT('%', #{name}, '%')
            </if>
            <if test="major != null and major != ''">
                AND u.major LIKE CONCAT('%', #{major}, '%')
            </if>
            <if test="expectedDepartment != null and expectedDepartment != ''">
                AND rfv_ed.field_value LIKE CONCAT('%', #{expectedDepartment}, '%')
            </if>
            <if test="cycleId != null">
                AND r.cycle_id = #{cycleId}
            </if>
            <if test="status != null and status != ''">
                <choose>
                    <when test="status.indexOf(',') > -1">
                        AND r.status IN 
                        <foreach collection="status.split(',')" item="statusValue" open="(" separator="," close=")">
                            #{statusValue}
                        </foreach>
                    </when>
                    <otherwise>
                        AND r.status = #{status}
                    </otherwise>
                </choose>
            </if>
        </where>
        ORDER BY r.created_at DESC
    </select>
    
    <!-- 多条件查询简历列表（分页） -->
    <select id="queryResumesWithPagination" resultMap="ResumeMap">
        SELECT DISTINCT r.* FROM resume r
        LEFT JOIN user u ON r.user_id = u.user_id
        LEFT JOIN resume_field_value rfv_ed ON r.resume_id = rfv_ed.resume_id
        LEFT JOIN resume_field_definition rfd_ed ON rfv_ed.field_id = rfd_ed.field_id AND rfd_ed.field_key = 'expected_departments'
        <where>
            <if test="name != null and name != ''">
                AND u.name LIKE CONCAT('%', #{name}, '%')
            </if>
            <if test="major != null and major != ''">
                AND u.major LIKE CONCAT('%', #{major}, '%')
            </if>
            <if test="expectedDepartment != null and expectedDepartment != ''">
                AND rfv_ed.field_value LIKE CONCAT('%', #{expectedDepartment}, '%')
            </if>
            <if test="cycleId != null">
                AND r.cycle_id = #{cycleId}
            </if>
            <if test="status != null and status != ''">
                <choose>
                    <when test="status.indexOf(',') > -1">
                        AND r.status IN 
                        <foreach collection="status.split(',')" item="statusValue" open="(" separator="," close=")">
                            #{statusValue}
                        </foreach>
                    </when>
                    <otherwise>
                        AND r.status = #{status}
                    </otherwise>
                </choose>
            </if>
        </where>
        ORDER BY r.created_at DESC
        LIMIT #{offset}, #{limit}
    </select>
    
    <!-- 统计多条件查询简历数量 -->
    <select id="countResumes" resultType="int">
        SELECT COUNT(DISTINCT r.resume_id) FROM resume r
        LEFT JOIN user u ON r.user_id = u.user_id
        LEFT JOIN resume_field_value rfv_ed ON r.resume_id = rfv_ed.resume_id
        LEFT JOIN resume_field_definition rfd_ed ON rfv_ed.field_id = rfd_ed.field_id AND rfd_ed.field_key = 'expected_departments'
        <where>
            <if test="name != null and name != ''">
                AND u.name LIKE CONCAT('%', #{name}, '%')
            </if>
            <if test="major != null and major != ''">
                AND u.major LIKE CONCAT('%', #{major}, '%')
            </if>
            <if test="expectedDepartment != null and expectedDepartment != ''">
                AND rfv_ed.field_value LIKE CONCAT('%', #{expectedDepartment}, '%')
            </if>
            <if test="cycleId != null">
                AND r.cycle_id = #{cycleId}
            </if>
            <if test="status != null and status != ''">
                <choose>
                    <when test="status.indexOf(',') > -1">
                        AND r.status IN 
                        <foreach collection="status.split(',')" item="statusValue" open="(" separator="," close=")">
                            #{statusValue}
                        </foreach>
                    </when>
                    <otherwise>
                        AND r.status = #{status}
                    </otherwise>
                </choose>
            </if>
        </where>
    </select>
    
    <!-- 插入简历 -->
    <insert id="insert" parameterType="club.boyuan.official.entity.Resume" useGeneratedKeys="true" keyProperty="resumeId">
        INSERT INTO resume(user_id, cycle_id, status)
        VALUES(#{userId}, #{cycleId}, #{status})
    </insert>
    
    <!-- 更新简历 -->
    <update id="update" parameterType="club.boyuan.official.entity.Resume">
        UPDATE resume 
        SET status = #{status}, submitted_at = #{submittedAt}, updated_at = NOW()
        WHERE resume_id = #{resumeId}
    </update>
    
    <!-- 删除简历 -->
    <delete id="deleteById">
        DELETE FROM resume WHERE resume_id = #{resumeId}
    </delete>
    
    <!-- 根据用户ID删除简历 -->
    <delete id="deleteByUserId">
        DELETE FROM resume WHERE user_id = #{userId}
    </delete>
    
</mapper>